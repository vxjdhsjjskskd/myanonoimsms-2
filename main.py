"""
–§–∞–π–ª —Å –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ (async def main)
–ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Long Polling –Ω–∞ Render,
—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ aiohttp –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–∏—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π Render.

"""

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiohttp import web # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º web –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è HTTP —Å–µ—Ä–≤–µ—Ä–∞
import asyncio
import logging
import os

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# == –ò–ú–ü–û–†–¢–´ –í–ê–®–ò–• –ú–û–î–£–õ–ï–ô ==
# –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç–∏ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–ª—è –≤–∞—à–∏—Ö —Ñ–∞–π–ª–æ–≤!
# –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É –≤–∞—Å commands.py –∏ handlers.py –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–µ tg_bot:
from tg_bot import commands, handlers

# –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û: –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB,
# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ—ë –∑–¥–µ—Å—å. –Ø –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, —á—Ç–æ –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è 'async_main'
# –∏–∑ 'data.models' –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —ç—Ç–æ. –ï—Å–ª–∏ –Ω–µ—Ç, –∑–∞–º–µ–Ω–∏—Ç–µ 'connect_to_mongo_db'
# –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î, –∏ 'data.models'
# –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É —Ñ–∞–π–ª—É.
from data.models import async_main as connect_to_mongo_db


# == –ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê ==

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN
bot_token = os.getenv("BOT_TOKEN")
if not bot_token:
    logger.error("BOT_TOKEN environment variable is not set!")
    raise ValueError("BOT_TOKEN environment variable is not set.")

# –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π Render –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –Ω–∞—à–µ–º—É —Å–µ—Ä–≤–∏—Å—É
PORT = int(os.environ.get("PORT", 8080)) # 8080 - –∑–∞–ø–∞—Å–Ω–æ–π –ø–æ—Ä—Ç, –µ—Å–ª–∏ PORT –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω

# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=bot_token, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# == –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –†–û–£–¢–ï–†–û–í ==
# –í–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∏–∑ –≤–∞—à–∏—Ö –º–æ–¥—É–ª–µ–π commands –∏ handlers.
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤ commands.py –∏ handlers.py —É –≤–∞—Å —Å–æ–∑–¥–∞–Ω—ã –æ–±—ä–µ–∫—Ç—ã Router,
# –Ω–∞–ø—Ä–∏–º–µ—Ä: rt = Router()
dp.include_routers(commands.rt, handlers.rt)

# == –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ú–ò–ù–ò–ú–ê–õ–¨–ù–û–ì–û –í–ï–ë-–°–ï–†–í–ï–†–ê AIOHTTP ==

async def index_handler(request):
    """
    –ü—Ä–æ—Å—Ç–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ URL.
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç, —á—Ç–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω.
    """
    return web.Response(text="–ê–Ω–æ–Ω–∏–º–Ω—ã–π –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!")

async def health_check_handler(request):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ (Health Check).
    """
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ç–∞—Ç—É—Å–∞ MongoDB, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    db_status = "connected" # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ connect_to_mongo_db —É–∂–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª
    return web.json_response({"status": "OK", "bot_status": "polling", "database": db_status})


# == –§–£–ù–ö–¶–ò–ò –ó–ê–ü–£–°–ö–ê –ò –û–°–¢–ê–ù–û–í–ö–ò ==

async def on_startup_polling(dispatcher: Dispatcher, bot: Bot):
    """
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.
    –ó–¥–µ—Å—å –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î.
    """
    logger.info("Starting bot in Long Polling mode...")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB Atlas
    try:
        logger.info("Connecting to MongoDB Atlas...")
        await connect_to_mongo_db() 
        logger.info("Successfully connected to MongoDB Atlas!")
    except Exception as e:
        logger.exception(f"Failed to connect to MongoDB Atlas: {e}")
        # –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∫—Ä–∏—Ç–∏—á–Ω–æ, –º–æ–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å –∑–∞–ø—É—Å–∫
        raise

    # –£–¥–∞–ª—è–µ–º –ª—é–±—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≤–µ–±—Ö—É–∫–∏, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ —Å Long Polling
    # –≠—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ, –µ—Å–ª–∏ –≤—ã —Ä–∞–Ω–µ–µ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∏ –≤–µ–±—Ö—É–∫–∏.
    current_webhook_info = await bot.get_webhook_info()
    if current_webhook_info.url:
        logger.info(f"Existing webhook found: {current_webhook_info.url}. Deleting it...")
        await bot.delete_webhook(drop_pending_updates=True)
        logger.info("Webhook deleted successfully.")
    else:
        logger.info("No active webhook found.")

    # == –£–°–¢–ê–ù–û–í–ö–ê –ö–û–ú–ê–ù–î –ú–ï–ù–Æ TELEGRAM ==
    # –ó–¥–µ—Å—å –º—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ –º–µ–Ω—é –±–æ—Ç–∞ –≤ Telegram.
    await bot.set_my_commands([
        types.BotCommand(command="start", description="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        types.BotCommand(command="profile", description="üìä –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å (—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Å—Å—ã–ª–∫–∞)"),
        types.BotCommand(command="help", description="‚ùì –ü–æ–º–æ—â—å"),
        # types.BotCommand(command="url", description="üîó –ò–∑–º–µ–Ω–∏—Ç—å/–ø–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É"),
        # types.BotCommand(command="issue", description="üí° –ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å –∏–¥–µ—é"),
        # types.BotCommand(command="lang", description="üè≥Ô∏è –í—ã–±—Ä–∞—Ç—å —è–∑—ã–∫"),
    ])
    logger.info("Telegram bot commands set successfully.")

    logger.info("Bot is ready to start polling for updates.")


async def on_shutdown_polling(dispatcher: Dispatcher, bot: Bot):
    """
    –§—É–Ω–∫—Ü–∏—è, –≤—ã–ø–æ–ª–Ω—è–µ–º–∞—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞.
    –ó–¥–µ—Å—å –∑–∞–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Å–µ—Å—Å–∏—è –±–æ—Ç–∞.
    """
    logger.info("Shutting down bot...")
    await bot.session.close()
    logger.info("Bot session closed.")


# == –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ó–ê–ü–£–°–ö–ê ==

async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä.
    """
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    dp.startup.register(on_startup_polling)
    dp.shutdown.register(on_shutdown_polling)

    # –°–æ–∑–¥–∞–µ–º aiohttp.web.Application –¥–ª—è –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    web_app = web.Application()
    web_app.router.add_get('/', index_handler)
    web_app.router.add_get('/health', health_check_handler) # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏

    # –ó–∞–ø—É—Å–∫–∞–µ–º aiohttp –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', PORT)

    logger.info(f"Starting aiohttp web server on 0.0.0.0:{PORT}...")
    await site.start()
    logger.info("aiohttp web server started.")

    # –ó–∞–ø—É—Å–∫–∞–µ–º Long Polling –±–æ—Ç–∞ –∏ –∂–¥–µ–º, –ø–æ–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä–æ–µ—Ç—Å—è
    logger.info("Starting bot's Long Polling loop alongside web server...")
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–µ –∑–∞–¥–∞—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
        await asyncio.gather(
            dp.start_polling(bot), # Long Polling –¥–ª—è Telegram
            site.wait_closed()     # –ñ–¥–µ–º –∑–∞–∫—Ä—ã—Ç–∏—è –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ (–ø–æ —Å—É—Ç–∏, –¥–µ—Ä–∂–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å –∂–∏–≤—ã–º)
        )
    except asyncio.CancelledError:
        logger.info("Application stopped by CancelledError (e.g., SIGTERM).")
    except Exception as e:
        logger.exception(f"An unexpected error occurred during application runtime: {e}")
    finally:
        # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        await runner.cleanup() # –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ aiohttp
        logger.info("Web server and bot polling stopped, resources cleaned up.")


if __name__ == "__main__":
    asyncio.run(main())

