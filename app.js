// app.js - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ (—Å MongoDB Atlas)

const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const { connectDb } = require('./src/db'); // –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –ª–æ–≥–∏–∫–∏ –±–æ—Ç–∞ (–≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã)
const {
    handleStart,
    handleMyLink,
    handleMyId,
    initiateSendMessage,
    handleSendMessageStep,
    handleInbox,
    handleReply,
    handleBlock,
    handleUnblock,
    handleBlocked,
    handleChangeId,
    handleChangeLink,
    handleHelp,
    handleUserTextMessage // <--- –î–æ–±–∞–≤–ª–µ–Ω–æ
} = require('./src/handlers'); // <--- –ò–ó–ú–ï–ù–ï–ù–û: handlers.js

const { getUserData, updateUserData } = require('./src/dataAccess'); // –î–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ app.js
const { generateAnonymousId, generateLinkCode } = require('./src/utils'); // –î–ª—è –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤ app.js

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
// Render —Å–∞–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç PORT, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ. –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ 3000 –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π.
const PORT = process.env.PORT || 3000;

if (!TOKEN) {
    console.error('‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.');
    process.exit(1);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
const bot = new TelegramBot(TOKEN, { polling: true });
const app = express();

let BOT_USERNAME = '';

// Health endpoint –¥–ª—è uptimebot
app.get('/health', (req, res) => {
    res.status(200).json({
        status: 'ok',
        timestamp: new Date().toISOString(),
        bot: 'Anonymous Ask Bot',
        uptime: process.uptime()
    });
});

// –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
    console.log(`üåê Health endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://0.0.0.0:${PORT}/health`);
    console.log(`üìä –î–ª—è uptimebot –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: https://[–≤–∞—à-–¥–æ–º–µ–Ω]/health`);
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –±–æ—Ç–∞
bot.getMe().then(me => {
    BOT_USERNAME = me.username;
    console.log(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @${BOT_USERNAME}`);
}).catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', err);
});

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö MongoDB Atlas ---
connectDb().then(() => {
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö MongoDB Atlas –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É –±–æ—Ç–∞...');
    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î, –º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
    initializeBotLogic();
}).catch(err => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
    process.exit(1);
});

// --- –§—É–Ω–∫—Ü–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –≤—Å—é –ª–æ–≥–∏–∫—É –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î ---
async function initializeBotLogic() {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    bot.setMyCommands([
        { command: 'start', description: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
        { command: 'stats', description: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' },
        { command: 'changelink', description: 'üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É' }
    ]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    bot.onText(/\/start(?: (.+))?/, async (msg, match) => {
        const chatId = msg.chat.id;
        const startPayload = match ? match[1] : undefined;

        console.log(`üë§ /start –æ—Ç ${chatId}, payload: ${startPayload || '–Ω–µ—Ç'}`);
        const response = await handleStart(chatId, startPayload, BOT_USERNAME); // <--- –ê–°–ò–ù–•–†–û–ù–ù–´–ô –í–´–ó–û–í
        bot.sendMessage(chatId, response, { parse_mode: 'Markdown' }); // mainKeyboard –Ω–µ –Ω—É–∂–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ –≥–ª–æ–±–∞–ª—å–Ω–∞—è
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ—è —Å—Å—ã–ª–∫–∞" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /mylink
    bot.onText(/\/mylink|–ú–æ—è —Å—Å—ã–ª–∫–∞/, async (msg) => {
        const chatId = msg.chat.id;
        console.log(`[Bot Handler] –û–±—Ä–∞–±–æ—Ç–∫–∞ /mylink –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "–ú–æ—è —Å—Å—ã–ª–∫–∞" –¥–ª—è chat ID: ${chatId}`);
        const response = await handleMyLink(chatId, BOT_USERNAME); // <--- –ê–°–ò–ù–•–†–û–ù–ù–´–ô –í–´–ó–û–í
        bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π ID" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /myid
    bot.onText(/\/myid|–ú–æ–π ID/, async (msg) => {
        const chatId = msg.chat.id;
        console.log(`[Bot Handler] –û–±—Ä–∞–±–æ—Ç–∫–∞ /myid –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "–ú–æ–π ID" –¥–ª—è chat ID: ${chatId}`);
        const response = await handleMyId(chatId); // <--- –ê–°–ò–ù–•–†–û–ù–ù–´–ô –í–´–ó–û–í
        bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /send (–∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç –ø–æ—à–∞–≥–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É)
    bot.onText(/\/send|–û—Ç–ø—Ä–∞–≤–∏—Ç—å/, async (msg) => {
        const chatId = msg.chat.id;
        console.log(`[Bot Handler] –û–±—Ä–∞–±–æ—Ç–∫–∞ /send –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –¥–ª—è chat ID: ${chatId}`);
        // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ /send —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ (—Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç), –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ–µ –Ω–∞–ø—Ä—è–º—É—é
        const match = msg.text.match(/\/send (.+)/);
        if (match && match[1]) {
            const args = match[1].split(' ');
            const result = await handleSendMessageStep(chatId, null, args[0], args.slice(1).join(' ')); // <--- –ê–°–ò–ù–•–†–û–ù–ù–´–ô –í–´–ó–û–í
            bot.sendMessage(chatId, result.responseForSender || result, { parse_mode: 'Markdown' });

            if (result.recipientTelegramId && result.senderAnonId && result.messageText) {
                bot.sendMessage(result.recipientTelegramId, `üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç **${result.senderAnonId}**: ${result.messageText}`, { parse_mode: 'Markdown' });
            }
        } else {
            // –ï—Å–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å" –∏–ª–∏ –≤–≤–µ–¥–µ–Ω–∞ /send –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –∏–Ω–∏—Ü–∏–∏—Ä—É–µ–º –ø–æ—à–∞–≥–æ–≤—ã–π –ø—Ä–æ—Ü–µ—Å—Å
            const response = await initiateSendMessage(chatId); // <--- –ê–°–ò–ù–•–†–û–ù–ù–´–ô –í–´–ó–û–í
            bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–í—Ö–æ–¥—è—â–∏–µ" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /inbox
    bot.onText(/\/inbox|–í—Ö–æ–¥—è—â–∏–µ/, async (msg) => {
        const chatId = msg.chat.id;
        console.log(`[Bot Handler] –û–±—Ä–∞–±–æ—Ç–∫–∞ /inbox –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "–í—Ö–æ–¥—è—â–∏–µ" –¥–ª—è chat ID: ${chatId}`);
        const response = await handleInbox(chatId); // <--- –ê–°–ò–ù–•–†–û–ù–ù–´–ô –í–´–ó–û–í
        bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /reply
    bot.onText(/\/reply (.+)|–û—Ç–≤–µ—Ç–∏—Ç—å/, async (msg, match) => {
        const chatId = msg.chat.id;
        console.log(`[Bot Handler] –û–±—Ä–∞–±–æ—Ç–∫–∞ /reply –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å" –¥–ª—è chat ID: ${chatId}`);
        const args = match ? match[1].split(' ') : []; // –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –µ—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞

        if (msg.text === '–û—Ç–≤–µ—Ç–∏—Ç—å') {
            bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/reply [–≤–∞—à –æ—Ç–≤–µ—Ç]`', { parse_mode: 'Markdown' });
        } else {
            const result = await handleReply(chatId, args); // <--- –ê–°–ò–ù–•–†–û–ù–ù–´–ô –í–´–ó–û–í
            bot.sendMessage(chatId, result.responseForOwner || result, { parse_mode: 'Markdown' });

            if (result.recipientChatId && result.replyText) {
                bot.sendMessage(result.recipientChatId, result.replyText, { parse_mode: 'Markdown' });
            }
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /block
    bot.onText(/\/block|–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/, async (msg) => {
        const chatId = msg.chat.id;
        console.log(`[Bot Handler] –û–±—Ä–∞–±–æ—Ç–∫–∞ /block –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" –¥–ª—è chat ID: ${chatId}`);
        if (msg.text === '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å') {
            bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/block [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏]`', { parse_mode: 'Markdown' });
        } else {
            const match = msg.text.match(/\/block (.+)/);
            if (match && match[1]) {
                const args = match[1].split(' ');
                const response = await handleBlock(chatId, args); // <--- –ê–°–ò–ù–•–†–û–ù–ù–´–ô –í–´–ó–û–í
                bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
            } else {
                bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/block [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏]`', { parse_mode: 'Markdown' });
            }
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /unblock
    bot.onText(/\/unblock|–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å/, async (msg) => {
        const chatId = msg.chat.id;
        console.log(`[Bot Handler] –û–±—Ä–∞–±–æ—Ç–∫–∞ /unblock –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å" –¥–ª—è chat ID: ${chatId}`);
        if (msg.text === '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å') {
            bot.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `/unblock [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏]`', { parse_mode: 'Markdown' });
        } else {
            const match = msg.text.match(/\/unblock (.+)/);
            if (match && match[1]) {
                const args = match[1].split(' ');
                const response = await handleUnblock(chatId, args); // <--- –ê–°–ò–ù–•–†–û–ù–ù–´–ô –í–´–ó–û–í
                bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
            } else {
                bot.sendMessage(chatId, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: `/unblock [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏]`', { parse_mode: 'Markdown' });
            }
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /blocked
    bot.onText(/\/blocked|–ú–æ–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏/, async (msg) => {
        const chatId = msg.chat.id;
        console.log(`[Bot Handler] –û–±—Ä–∞–±–æ—Ç–∫–∞ /blocked –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏" –¥–ª—è chat ID: ${chatId}`);
        const response = await handleBlocked(chatId); // <--- –ê–°–ò–ù–•–†–û–ù–ù–´–ô –í–´–ó–û–í
        bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–º–µ–Ω–∏—Ç—å ID" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /changeid
    bot.onText(/\/changeid|–°–º–µ–Ω–∏—Ç—å ID/, async (msg) => {
        const chatId = msg.chat.id;
        console.log(`[Bot Handler] –û–±—Ä–∞–±–æ—Ç–∫–∞ /changeid –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "–°–º–µ–Ω–∏—Ç—å ID" –¥–ª—è chat ID: ${chatId}`);
        const response = await handleChangeId(chatId); // <--- –ê–°–ò–ù–•–†–û–ù–ù–´–ô –í–´–ó–û–í
        bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–°–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /changelink
    bot.onText(/\/changelink|–°–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É/, async (msg) => {
        const chatId = msg.chat.id;
        console.log(`[Bot Handler] –û–±—Ä–∞–±–æ—Ç–∫–∞ /changelink –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "–°–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É" –¥–ª—è chat ID: ${chatId}`);
        const response = await handleChangeLink(chatId, BOT_USERNAME); // <--- –ê–°–ò–ù–•–†–û–ù–ù–´–ô –í–´–ó–û–í
        bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å" –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã /help
    bot.onText(/\/help|–ü–æ–º–æ—â—å/, async (msg) => {
        const chatId = msg.chat.id;
        console.log(`[Bot Handler] –û–±—Ä–∞–±–æ—Ç–∫–∞ /help –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ "–ü–æ–º–æ—â—å" –¥–ª—è chat ID: ${chatId}`);
        const response = handleHelp(); // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞
        bot.sendMessage(chatId, response, { parse_mode: 'Markdown' });
    });

    // --- –ì–õ–ê–í–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –í–°–ï–• –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô (–¥–ª—è –ø–æ—à–∞–≥–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥ –∏ –∞–Ω–æ–Ω–∏–º–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤) ---
    bot.on('message', async (msg) => {
        const chatId = msg.chat.id;
        const messageText = msg.text;

        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å '/' (–∫–æ–º–∞–Ω–¥—ã)
        if (messageText && messageText.startsWith('/')) {
            return;
        }
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —è–≤–ª—è—é—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–æ–∫
        const buttonTexts = ['–ú–æ—è —Å—Å—ã–ª–∫–∞', '–ú–æ–π ID', '–û—Ç–ø—Ä–∞–≤–∏—Ç—å', '–í—Ö–æ–¥—è—â–∏–µ', '–û—Ç–≤–µ—Ç–∏—Ç—å', '–ú–æ–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏', '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', '–°–º–µ–Ω–∏—Ç—å ID', '–°–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É', '–ü–æ–º–æ—â—å'];
        if (buttonTexts.includes(messageText)) {
            return;
        }

        console.log(`[Bot Handler] –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–Ω–µ –∫–æ–º–∞–Ω–¥–∞/–∫–Ω–æ–ø–∫–∞) –æ—Ç chat ID: ${chatId}: "${messageText}"`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –ø–æ—à–∞–≥–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
        const userData = await getUserData(chatId); // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        if (!userData) {
            return bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        }

        let result = null;
        if (userData.currentCommandStep === 'awaiting_recipient_id' || userData.currentCommandStep === 'awaiting_message_text') {
            result = await handleSendMessageStep(chatId, messageText);
        } else if (userData.currentCommandStep === 'awaiting_anon_message') {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—à–µ–ª –ø–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –∂–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            result = await sendAnonymousMessage(chatId, userData.tempData.owner_telegram_id, messageText);
            // –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            userData.currentCommandStep = null;
            userData.tempData = {};
            await updateUserData(chatId, userData);
        } else if (msg.reply_to_message && userData.lastAnonSenderChatId) {
            // –ï—Å–ª–∏ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            result = await handleReply(chatId, [messageText]); // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
        }


        if (result) {
            // –ï—Å–ª–∏ handleUserTextMessage –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —ç—Ç–æ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —á–∞—Å—Ç—å—é –ø–æ—à–∞–≥–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã
            bot.sendMessage(chatId, result.responseForSender || result.responseForOwner || result, { parse_mode: 'Markdown' });

            // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
            if (result.recipientTelegramId && result.senderAnonId && result.messageText) {
                bot.sendMessage(result.recipientTelegramId, `üì¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç **${result.senderAnonId}**: ${result.messageText}`, { parse_mode: 'Markdown' });
            }
            // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤–ª–∞–¥–µ–ª—å—Ü—É —Å—Å—ã–ª–∫–∏
            else if (result.ownerTelegramId && result.senderChatId && result.messageText) { // ownerTelegramId - —ç—Ç–æ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                bot.sendMessage(result.ownerTelegramId, `üèÑ‚Äç‚ôÇÔ∏è –£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n${result.messageText}\n\n‚Ü©Ô∏è –°–≤–∞–π–ø–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.`, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚ùå –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'block_sender' }]
                        ]
                    }
                });
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º lastAnonSenderChatId –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞ —Å—Å—ã–ª–∫–∏
                const ownerData = await getUserData(result.ownerTelegramId);
                ownerData.lastAnonSenderChatId = String(result.senderChatId);
                ownerData.lastAnonSender = (await getUserData(result.senderChatId)).anonymousId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                await updateUserData(result.ownerTelegramId, ownerData);

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –µ–≥–æ —Å—Å—ã–ª–∫—É
                bot.sendMessage(result.senderChatId, 'üèÑ‚Äç‚ôÇÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç!', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚úçÔ∏è –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë', callback_data: 'send_more' }]
                        ]
                    }
                });
                const senderPromoData = await getUserData(result.senderChatId);
                bot.sendMessage(result.senderChatId,
                    `üöÄ –ù–∞—á–Ω–∏ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n` +
                    `–¢–≤–æ—è —Å—Å—ã–ª–∫–∞:\n` +
                    `üëâ https://t.me/${BOT_USERNAME}?start=${senderPromoData.anonLinkCode}\n\n` +
                    `–†–∞–∑–º–µ—Å—Ç–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É ‚òùÔ∏è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è Telegram/TikTok/Instagram, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üí¨`
                );

            }
            // –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –æ—Ç–≤–µ—Ç –Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            else if (result.recipientChatId && result.replyText) {
                bot.sendMessage(result.recipientChatId, result.replyText, { parse_mode: 'Markdown' });
                // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É "–ù–∞–ø–∏—Å–∞—Ç—å –µ—â—ë" –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                bot.sendMessage(result.recipientChatId, 'üïä –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ', {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –µ—â—ë', callback_data: 'send_more' }]
                        ]
                    }
                });
            }
        } else {
            // –ï—Å–ª–∏ handleUserTextMessage –≤–µ—Ä–Ω—É–ª null, —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
            // –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±–æ—Ç –º–æ–∂–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å, —á—Ç–æ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç.
            bot.sendMessage(chatId, '–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.', { parse_mode: 'Markdown' });
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫)
    bot.on('callback_query', async (callbackQuery) => {
        const message = callbackQuery.message;
        const data = callbackQuery.data;
        const chatId = message.chat.id;

        await bot.answerCallbackQuery(callbackQuery.id);

        const userData = await getUserData(chatId);
        if (!userData) return;

        switch (data) {
            case 'cancel_message':
                userData.currentCommandStep = null;
                userData.tempData = {};
                await updateUserData(chatId, userData);
                bot.editMessageText(
                    '‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
                    {
                        chat_id: chatId,
                        message_id: message.message_id
                    }
                );
                break;

            case 'send_more':
                // lastAnonSenderChatId –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è "–û—Ç–≤–µ—Ç–∏—Ç—å", –∞ owner_telegram_id –¥–ª—è "–û—Ç–ø—Ä–∞–≤–∏—Ç—å"
                let targetOwnerForSendMore = userData.tempData.owner_telegram_id || userData.lastAnonSenderChatId;

                if (targetOwnerForSendMore) {
                    userData.currentCommandStep = 'awaiting_anon_message';
                    userData.tempData = { owner_telegram_id: targetOwnerForSendMore };
                    await updateUserData(chatId, userData);

                    const keyboard = {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_message' }]
                            ]
                        }
                    }

                    bot.sendMessage(chatId,
                        `üöÄ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É.\n\n` +
                        `‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –≤—Å—ë, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å, –∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ–Ω –ø–æ–ª—É—á–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ.\n\n` +
                        `–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, üí¨ —Ç–µ–∫—Å—Ç, üîä –≥–æ–ª–æ—Å–æ–≤—ã–µ, üì∑ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–∫–∏), –∞ —Ç–∞–∫–∂–µ ‚ú® —Å—Ç–∏–∫–µ—Ä—ã`,
                        keyboard
                    );
                } else {
                    bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —á–µ—Ä–µ–∑ /start –∏–ª–∏ /send.');
                }
                break;

            case 'block_sender':
                if (userData.lastAnonSender) { // lastAnonSender - —ç—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
                    if (!userData.blockedUsers.includes(userData.lastAnonSender)) {
                        userData.blockedUsers.push(userData.lastAnonSender);
                        await updateUserData(chatId, userData);
                    }
                    bot.editMessageReplyMarkup(
                        {
                            inline_keyboard: [
                                [{ text: 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫', callback_data: 'clear_blacklist' }]
                            ]
                        },
                        {
                            chat_id: chatId,
                            message_id: message.message_id
                        }
                    );
                    bot.sendMessage(chatId, `üö´ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å **${userData.lastAnonSender}** –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
                }
                break;

            case 'clear_blacklist':
                userData.blockedUsers = [];
                await updateUserData(chatId, userData);
                bot.editMessageReplyMarkup(
                    { inline_keyboard: [] },
                    {
                        chat_id: chatId,
                        message_id: message.message_id
                    }
                );
                bot.sendMessage(chatId, '‚úÖ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω.');
                break;
        }
    });
} // <--- –ó–ê–ö–†–´–í–ê–Æ–©–ê–Ø –°–ö–û–ë–ö–ê initializeBotLogic() - –≠–¢–û –ü–†–ê–í–ò–õ–¨–ù–û–ï –ó–ê–í–ï–†–®–ï–ù–ò–ï –§–£–ù–ö–¶–ò–ò

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.on('polling_error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ polling:', error.message);
});

bot.on('error', (error) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error.message);
});

console.log('üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...');
