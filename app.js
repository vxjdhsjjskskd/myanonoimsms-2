// app.js - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram –±–æ—Ç–∞ (—Å MongoDB Atlas)

const TelegramBot = require('node-telegram-bot-api');
const express = require('express');
const { connectDb } = require('./src/db'); // –ò–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î

// –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º (—Ç–µ–ø–µ—Ä—å –∏–∑ dataAccess.js)
const {
    initializeDb, // –≠—Ç–æ –±—É–¥–µ—Ç –∑–∞–≥–ª—É—à–∫–∞, —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ src/db.js
    getUserData,
    updateUserData,
    getAnonLinkMap,
    // setAnonLinkMapEntry, // <--- –£–î–ê–õ–ò–¢–¨: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
    // deleteAnonLinkMapEntry, // <--- –£–î–ê–õ–ò–¢–¨: –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
    getAllUsers // –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞
} = require('./src/dataAccess'); // <--- –ò–ó–ú–ï–ù–ï–ù–û: database -> dataAccess

const { generateAnonymousId, generateLinkCode } = require('./src/utils'); // generateLinkCode —Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const PORT = process.env.PORT || 10000; // –ò—Å–ø–æ–ª—å–∑—É–µ–º 10000 –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π, –µ—Å–ª–∏ Render –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç —Å–≤–æ–π

if (!TOKEN) {
    console.error('‚ùå –û—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
}

// –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
const bot = new TelegramBot(TOKEN, { polling: true });
const app = express();

let BOT_USERNAME = '';

// Health endpoint –¥–ª—è uptimebot
app.get('/health', (req, res) => {
    res.status(200).json({
        status: 'ok',
        timestamp: new Date().toISOString(),
        bot: 'Anonymous Ask Bot',
        uptime: process.uptime()
    });
});

// –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
    console.log(`üåê Health endpoint –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://0.0.0.0:${PORT}/health`);
    console.log(`üìä –î–ª—è uptimebot –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: https://[–≤–∞—à-–¥–æ–º–µ–Ω]/health`);
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –±–æ—Ç–∞
bot.getMe().then(me => {
    BOT_USERNAME = me.username;
    console.log(`ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @${BOT_USERNAME}`);
}).catch(err => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', err);
});

// --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö MongoDB Atlas ---
connectDb().then(() => {
    console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö MongoDB Atlas –ø–æ–¥–∫–ª—é—á–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞–µ–º –ª–æ–≥–∏–∫—É –±–æ—Ç–∞...');
    // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î, –º–æ–∂–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ—Å—Ç–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
    initializeBotLogic();
}).catch(err => {
    console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', err);
    process.exit(1);
});

// --- –§—É–Ω–∫—Ü–∏—è, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è –≤—Å—é –ª–æ–≥–∏–∫—É –±–æ—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î ---
async function initializeBotLogic() {
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    bot.setMyCommands([
        { command: 'start', description: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
        { command: 'stats', description: 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' },
        { command: 'changelink', description: 'üîó –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É' }
    ]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    bot.onText(/\/start(?: (.+))?/, async (msg, match) => {
        const chatId = msg.chat.id;
        const startPayload = match ? match[1] : null;

        console.log(`üë§ /start –æ—Ç ${chatId}, payload: ${startPayload || '–Ω–µ—Ç'}`);

        // –ï—Å–ª–∏ –µ—Å—Ç—å payload - —ç—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–π —Å—Å—ã–ª–∫–µ
        if (startPayload) {
            const linkMap = await getAnonLinkMap(); // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            const ownerChatId = linkMap[startPayload.toUpperCase()];

            if (ownerChatId && ownerChatId !== String(chatId)) {
                // –ê–Ω–æ–Ω–∏–º–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
                let userData = await getUserData(chatId); // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                if (!userData) {
                    userData = {
                        chatId: String(chatId),
                        anonymousId: await generateAnonymousId(), // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                        linkCode: await generateLinkCode(), // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                        blockedUsers: [],
                        registeredAt: new Date(), // –ò—Å–ø–æ–ª—å–∑—É–µ–º Date –æ–±—ä–µ–∫—Ç
                        messagesReceived: 0,
                        messagesSent: 0,
                        waitingFor: null, // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∏ –ø–æ–ª—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
                        targetOwner: null,
                        lastAnonSender: null,
                        lastAnonSenderChatId: null
                    };
                    await updateUserData(chatId, userData); // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                }

                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                userData.waitingFor = 'anon_message';
                userData.targetOwner = ownerChatId;
                await updateUserData(chatId, userData); // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

                const keyboard = {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_message' }]
                        ]
                    }
                };

                return bot.sendMessage(chatId,
                    `üöÄ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É.\n\n` +
                    `‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –≤—Å—ë, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å, –∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ–Ω –ø–æ–ª—É—á–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ.\n\n` +
                    `–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, üí¨ —Ç–µ–∫—Å—Ç, üîä –≥–æ–ª–æ—Å–æ–≤—ã–µ, üì∑ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–∫–∏), –∞ —Ç–∞–∫–∂–µ ‚ú® —Å—Ç–∏–∫–µ—Ä—ã`,
                    keyboard
                );
            } else if (ownerChatId === String(chatId)) {
                // –í–ª–∞–¥–µ–ª–µ—Ü –ø–µ—Ä–µ—à–µ–ª –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—ã—á–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
                return handleStartCommand(chatId);
            } else {
                // –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞
                return bot.sendMessage(chatId,
                    `‚ùå –°—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.`
                );
            }
        }

        // –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start
        return handleStartCommand(chatId);
    });

    // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
    async function handleStartCommand(chatId) {
        let userData = await getUserData(chatId); // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        if (!userData) {
            userData = {
                chatId: String(chatId),
                anonymousId: await generateAnonymousId(), // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                linkCode: await generateLinkCode(), // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                blockedUsers: [],
                registeredAt: new Date(), // –ò—Å–ø–æ–ª—å–∑—É–µ–º Date –æ–±—ä–µ–∫—Ç
                messagesReceived: 0,
                messagesSent: 0,
                waitingFor: null, // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–∏ –ø–æ–ª—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
                targetOwner: null,
                lastAnonSender: null,
                lastAnonSenderChatId: null
            };
            await updateUserData(chatId, userData); // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${chatId}`);
        }

        const welcomeText =
            `üöÄ –ù–∞—á–Ω–∏ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n` +
            `–¢–≤–æ—è —Å—Å—ã–ª–∫–∞:\n` +
            `üëâ https://t.me/${BOT_USERNAME}?start=${userData.linkCode}\n\n` +
            `–†–∞–∑–º–µ—Å—Ç–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É ‚òùÔ∏è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è Telegram/TikTok/Instagram, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üí¨`;

        bot.sendMessage(chatId, welcomeText);
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats
    bot.onText(/\/stats/, async (msg) => {
        const chatId = msg.chat.id;
        const userData = await getUserData(chatId); // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

        if (!userData) {
            return bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
        }

        const statsText =
            `üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n` +
            `üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${userData.messagesReceived || 0}\n` +
            `üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${userData.messagesSent || 0}\n` +
            `üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${userData.blockedUsers.length}\n` +
            `üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${new Date(userData.registeredAt).toLocaleDateString('ru-RU')}`;

        bot.sendMessage(chatId, statsText);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /changelink
    bot.onText(/\/changelink/, async (msg) => {
        const chatId = msg.chat.id;
        const userData = await getUserData(chatId); // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

        if (!userData) {
            return bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start');
        }

        // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é —Å—Å—ã–ª–∫—É –∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        // deleteAnonLinkMapEntry(userData.linkCode); // <-- –≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
        const newLinkCode = await generateLinkCode(); // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

        userData.linkCode = newLinkCode;
        await updateUserData(chatId, userData); // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        // setAnonLinkMapEntry(newLinkCode, String(chatId)); // <-- –≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä—è–º—É—é

        const newLinkText =
            `üîó –°—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!\n\n` +
            `–¢–≤–æ—è –Ω–æ–≤–∞—è —Å—Å—ã–ª–∫–∞:\n` +
            `üëâ https://t.me/${BOT_USERNAME}?start=${newLinkCode}\n\n` +
            `–†–∞–∑–º–µ—Å—Ç–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É ‚òùÔ∏è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è Telegram/TikTok/Instagram, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üí¨`;

        bot.sendMessage(chatId, newLinkText);
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ (–∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫)
    bot.on('callback_query', async (callbackQuery) => {
        const message = callbackQuery.message;
        const data = callbackQuery.data;
        const chatId = message.chat.id;

        await bot.answerCallbackQuery(callbackQuery.id);

        const userData = await getUserData(chatId); // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        if (!userData) return;

        switch (data) {
            case 'cancel_message':
                userData.waitingFor = null;
                userData.targetOwner = null;
                await updateUserData(chatId, userData); // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                bot.editMessageText(
                    '‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.',
                    {
                        chat_id: chatId,
                        message_id: message.message_id
                    }
                );
                break;

            case 'send_more':
                // lastTargetOwner –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –ë–î, –ø–æ—ç—Ç–æ–º—É –µ–≥–æ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–∑ userData.targetOwner, –µ—Å–ª–∏ –æ–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
                // –∏–ª–∏ –∏–∑ lastAnonSenderChatId, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª –æ—Ç–≤–µ—Ç
                let targetOwnerForSendMore = userData.targetOwner || userData.lastAnonSenderChatId;

                if (targetOwnerForSendMore) {
                    userData.waitingFor = 'anon_message';
                    userData.targetOwner = targetOwnerForSendMore; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
                    await updateUserData(chatId, userData); // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

                    const keyboard = {
                        reply_markup: {
                            inline_keyboard: [
                                [{ text: '‚úñÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_message' }]
                            ]
                        }
                    };

                    bot.sendMessage(chatId,
                        `üöÄ –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ–ª–æ–≤–µ–∫—É, –∫–æ—Ç–æ—Ä—ã–π –æ–ø—É–±–ª–∏–∫–æ–≤–∞–ª —ç—Ç—É —Å—Å—ã–ª–∫—É.\n\n` +
                        `‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –≤—Å—ë, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –µ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å, –∏ —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –æ–Ω –ø–æ–ª—É—á–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–æ –Ω–µ –±—É–¥–µ—Ç –∑–Ω–∞—Ç—å –æ—Ç –∫–æ–≥–æ.\n\n` +
                        `–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ–∂–Ω–æ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, üí¨ —Ç–µ–∫—Å—Ç, üîä –≥–æ–ª–æ—Å–æ–≤—ã–µ, üì∑ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è (–∫—Ä—É–∂–∫–∏), –∞ —Ç–∞–∫–∂–µ ‚ú® —Å—Ç–∏–∫–µ—Ä—ã`,
                        keyboard
                    );
                } else {
                    bot.sendMessage(chatId, '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É.');
                }
                break;

            case 'block_sender':
                if (userData.lastAnonSender) {
                    if (!userData.blockedUsers.includes(userData.lastAnonSender)) {
                        userData.blockedUsers.push(userData.lastAnonSender);
                        await updateUserData(chatId, userData); // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                    }
                    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å "–û—á–∏—Å—Ç–∏—Ç—å —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫"
                    const newKeyboard = {
                        inline_keyboard: [
                            [{ text: 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫', callback_data: 'clear_blacklist' }]
                        ]
                    };
                    bot.editMessageReplyMarkup(
                        newKeyboard,
                        {
                            chat_id: chatId,
                            message_id: message.message_id
                        }
                    );
                    bot.sendMessage(chatId, `üö´ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å ${userData.lastAnonSender} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.`);
                }
                break;

            case 'clear_blacklist':
                userData.blockedUsers = [];
                await updateUserData(chatId, userData); // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                bot.editMessageReplyMarkup(
                    { inline_keyboard: [] }, // –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                    {
                        chat_id: chatId,
                        message_id: message.message_id
                    }
                );
                bot.sendMessage(chatId, '‚úÖ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω.');
                break;
        }
    });

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π
    bot.on('message', async (msg) => {
        const chatId = msg.chat.id;

        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
        if (msg.text && (msg.text.startsWith('/') || msg.text === '')) { // –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç
            return;
        }

        const userData = await getUserData(chatId); // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
        if (!userData) {
            // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –Ω–æ –ø—ã—Ç–∞–µ—Ç—Å—è —á—Ç–æ-—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å,
            // –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –µ–º—É /start
            return bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.');
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        if (userData.waitingFor === 'anon_message') {
            return handleAnonymousMessage(chatId, msg, userData);
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (reply)
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞ (reply_to_message)
        // –ò —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∞–Ω–æ–Ω–∏–º–Ω–æ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ
        if (msg.reply_to_message && userData.lastAnonSenderChatId) {
            return handleReplyMessage(chatId, msg, userData);
        }

        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –Ω–µ —á–∞—Å—Ç—å –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –∏ –Ω–µ –æ—Ç–≤–µ—Ç
        bot.sendMessage(chatId, '–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é.');
    });

    // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    async function handleAnonymousMessage(chatId, msg, userData) {
        const ownerChatId = userData.targetOwner;
        const ownerData = await getUserData(ownerChatId); // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

        if (!ownerData) {
            userData.waitingFor = null;
            userData.targetOwner = null;
            await updateUserData(chatId, userData); // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            return bot.sendMessage(chatId, '‚ùå –ü–æ–ª—É—á–∞—Ç–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if (ownerData.blockedUsers.includes(userData.anonymousId)) { // –ò—Å–ø–æ–ª—å–∑—É–µ–º blockedUsers –∏–∑ ownerData
            userData.waitingFor = null;
            userData.targetOwner = null;
            await updateUserData(chatId, userData); // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            return bot.sendMessage(chatId, 'üö´ –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã —ç—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–∞
        ownerData.lastAnonSender = userData.anonymousId; // –ê–Ω–æ–Ω–∏–º–Ω—ã–π ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        ownerData.lastAnonSenderChatId = String(chatId); // Chat ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        ownerData.messagesReceived = (ownerData.messagesReceived || 0) + 1;
        await updateUserData(ownerChatId, ownerData); // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ
        // userData.lastTargetOwner = ownerChatId; // –≠—Ç–æ –ø–æ–ª–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —Å—Ö–µ–º–µ User
        userData.messagesSent = (userData.messagesSent || 0) + 1;
        userData.waitingFor = null;
        userData.targetOwner = null;
        await updateUserData(chatId, userData); // <-- –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        const keyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å', callback_data: 'block_sender' }]
                ]
            }
        };

        let forwardedMessage;
        try {
            if (msg.text) {
                forwardedMessage = await bot.sendMessage(ownerChatId,
                    `ü§ø –£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n${msg.text}\n\n‚Ü©Ô∏è –°–≤–∞–π–ø–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.`,
                    keyboard
                );
            } else if (msg.photo) {
                forwardedMessage = await bot.sendPhoto(ownerChatId, msg.photo[msg.photo.length - 1].file_id, {
                    caption: `ü§ø –£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n${msg.caption || ''}\n\n‚Ü©Ô∏è –°–≤–∞–π–ø–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.`,
                    reply_markup: keyboard.reply_markup
                });
            } else if (msg.video) {
                forwardedMessage = await bot.sendVideo(ownerChatId, msg.video.file_id, {
                    caption: `ü§ø –£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n${msg.caption || ''}\n\n‚Ü©Ô∏è –°–≤–∞–π–ø–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.`,
                    reply_markup: keyboard.reply_markup
                });
            } else if (msg.voice) {
                forwardedMessage = await bot.sendVoice(ownerChatId, msg.voice.file_id, keyboard);
                await bot.sendMessage(ownerChatId, `ü§ø –£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n‚Ü©Ô∏è –°–≤–∞–π–ø–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.`);
            } else if (msg.video_note) {
                forwardedMessage = await bot.sendVideoNote(ownerChatId, msg.video_note.file_id, keyboard);
                await bot.sendMessage(ownerChatId, `ü§ø –£ —Ç–µ–±—è –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏–µ!\n\n‚Ü©Ô∏è –°–≤–∞–π–ø–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.`);
            } else if (msg.sticker) {
                forwardedMessage = await bot.sendSticker(ownerChatId, msg.sticker.file_id, keyboard);
                await bot.sendMessage(ownerChatId, `ü§ø –£ —Ç–µ–±—è –Ω–æ–≤—ã–π –∞–Ω–æ–Ω–∏–º–Ω—ã–π —Å—Ç–∏–∫–µ—Ä!\n\n‚Ü©Ô∏è –°–≤–∞–π–ø–Ω–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.`);
            }
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        }

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        const confirmKeyboard = {
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë', callback_data: 'send_more' }]
                ]
            }
        };

        await bot.sendMessage(chatId, 'ü§ø –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç!', confirmKeyboard);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        const promoText =
            `üöÄ –ù–∞—á–Ω–∏ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n` +
            `–¢–≤–æ—è —Å—Å—ã–ª–∫–∞:\n` +
            `üëâ https://t.me/${BOT_USERNAME}?start=${userData.linkCode}\n\n` +
            `–†–∞–∑–º–µ—Å—Ç–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É ‚òùÔ∏è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è Telegram/TikTok/Instagram, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üí¨`;

        bot.sendMessage(chatId, promoText);
    }

    // –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    async function handleReplyMessage(chatId, msg, userData) {
        if (!userData.lastAnonSenderChatId) {
            return;
        }

        const recipientChatId = userData.lastAnonSenderChatId;

        // –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –∞–Ω–æ–Ω–∏–º–Ω–æ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—é
        try {
            // –°–Ω–∞—á–∞–ª–∞ —Ü–∏—Ç–∏—Ä—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
            await bot.sendMessage(recipientChatId, `üí¨ –û—Ç–≤–µ—Ç –æ—Ç –≤–ª–∞–¥–µ–ª—å—Ü–∞:`);

            // –ó–∞—Ç–µ–º –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç –∫–∞–∫ –µ—Å—Ç—å
            if (msg.text) {
                await bot.sendMessage(recipientChatId, msg.text);
            } else if (msg.photo) {
                await bot.sendPhoto(recipientChatId, msg.photo[msg.photo.length - 1].file_id, {
                    caption: msg.caption || ''
                });
            } else if (msg.video) {
                await bot.sendVideo(recipientChatId, msg.video.file_id, {
                    caption: msg.caption || ''
                });
            } else if (msg.voice) {
                await bot.sendVoice(recipientChatId, msg.voice.file_id);
            } else if (msg.video_note) {
                a
