import { Telegraf, Markup, Scenes, session } from 'telegraf';
import dotenv from 'dotenv';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
import { setUser, getUserCode, getTgIdByCode, getMessageCounts, addMessageCounts, addLinkClick, updateUserCode, blockUser, unblockUser, isUserBlocked } from './dbService.js';
import { cancelKeyboard, writeMoreKeyboard, anonymousMessageButtons, confirmUnblockKeyboard } from './keyboards.js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const BOT_TOKEN = process.env.BOT_TOKEN;
export const bot = new Telegraf(BOT_TOKEN);

// --- FSM (Finite State Machine) - –°—Ü–µ–Ω—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---

// –°—Ü–µ–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ü–ï–†–í–û–ì–û –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
const sendScene = new Scenes.BaseScene('sendScene');

sendScene.enter(async (ctx) => {
    await ctx.reply(
        "üëâ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.\n\n" +
        "ü§ñ –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π: `–¢–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è, —Å—Ç–∏–∫–µ—Ä—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –æ–ø—Ä–æ—Å—ã, GIF.`",
        { reply_markup: cancelKeyboard().reply_markup, parse_mode: "Markdown", reply_to_message_id: ctx.message ? ctx.message.message_id : undefined }
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ sendScene (–ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
sendScene.on('text', async (ctx) => {
    const userIdToSend = ctx.scene.state.user; // –ü–æ–ª—É—á–∞—Ç–µ–ª—å
    const senderId = ctx.from.id; // –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const isBlocked = await isUserBlocked(userIdToSend, senderId);
    if (isBlocked) {
        await ctx.reply(`üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª.`, { reply_to_message_id: ctx.message.message_id, parse_mode: "Markdown" });
        return ctx.scene.leave();
    }

    try {
        await addMessageCounts(senderId, userIdToSend);

        await ctx.telegram.sendMessage(userIdToSend, `‚úâÔ∏è *–ü—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!*\n\n${ctx.message.text}`, {
            parse_mode: "Markdown",
            reply_markup: anonymousMessageButtons(senderId, userIdToSend).reply_markup
        });
        await ctx.reply(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!`, { reply_to_message_id: ctx.message.message_id, reply_markup: writeMoreKeyboard(userIdToSend).reply_markup });
        await ctx.scene.leave();
    } catch (e) {
        console.error(`[Bot] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç ${senderId} –∫ ${userIdToSend}:`, e.message);
        await ctx.reply(
            `‚ö†Ô∏è‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: \`${e.message}\`\n\n` +
            `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (@ArtizSQ –∏–ª–∏ @RegaaTG).`,
            { reply_to_message_id: ctx.message.message_id, parse_mode: "Markdown", reply_markup: cancelKeyboard().reply_markup }
        );
    }
});

sendScene.on(['photo', 'video', 'document', 'audio', 'voice', 'video_note', 'sticker', 'poll'], async (ctx) => {
    const userIdToSend = ctx.scene.state.user;
    const senderId = ctx.from.id;
    const message = ctx.message;
    const baseText = "‚úâÔ∏è *–ü—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!*\n\n";
    const caption = message.caption ? baseText + message.caption : baseText;
    const replyMarkup = anonymousMessageButtons(senderId, userIdToSend).reply_markup;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    const isBlocked = await isUserBlocked(userIdToSend, senderId);
    if (isBlocked) {
        await ctx.reply(`üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª.`, { reply_to_message_id: ctx.message.message_id, parse_mode: "Markdown" });
        return ctx.scene.leave();
    }

    try {
        await addMessageCounts(senderId, userIdToSend);

        let sentMessage;
        if (message.photo) {
            sentMessage = await ctx.telegram.sendPhoto(userIdToSend, message.photo[message.photo.length - 1].file_id, { caption: caption, parse_mode: "Markdown", reply_markup: replyMarkup });
        } else if (message.video) {
            sentMessage = await ctx.telegram.sendVideo(userIdToSend, message.video.file_id, { caption: caption, parse_mode: "Markdown", reply_markup: replyMarkup });
        } else if (message.document) {
            sentMessage = await ctx.telegram.sendDocument(userIdToSend, message.document.file_id, { caption: caption, parse_mode: "Markdown", reply_markup: replyMarkup });
        } else if (message.audio) {
            sentMessage = await ctx.telegram.sendAudio(userIdToSend, message.audio.file_id, { caption: caption, parse_mode: "Markdown", reply_markup: replyMarkup });
        } else if (message.voice) {
            sentMessage = await ctx.telegram.sendVoice(userIdToSend, message.voice.file_id, { caption: caption, parse_mode: "Markdown", reply_markup: replyMarkup });
        } else if (message.video_note) {
            if (caption && caption !== baseText) {
                await ctx.telegram.sendMessage(userIdToSend, caption, { parse_mode: "Markdown", reply_markup: replyMarkup });
            }
            sentMessage = await ctx.telegram.sendVideoNote(userIdToSend, message.video_note.file_id);
        } else if (message.sticker) {
            if (caption && caption !== baseText) {
                await ctx.telegram.sendMessage(userIdToSend, caption, { parse_mode: "Markdown", reply_markup: replyMarkup });
            }
            sentMessage = await ctx.telegram.sendSticker(userIdToSend, message.sticker.file_id);
        } else if (message.poll) {
            const question = message.poll.question;
            const options = message.poll.options.map(o => o.text);
            await ctx.telegram.sendMessage(userIdToSend, baseText, { parse_mode: "Markdown", reply_markup: replyMarkup });
            sentMessage = await ctx.telegram.sendPoll(userIdToSend, question, options, {
                is_anonymous: message.poll.is_anonymous,
                type: message.poll.type,
                allows_multiple_answers: message.poll.allows_multiple_answers
            });
        } else {
            return ctx.reply("‚ö†Ô∏è –ë–æ—Ç –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø.", { reply_to_message_id: ctx.message.message_id });
        }

        await ctx.reply(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!`, { reply_to_message_id: ctx.message.message_id, reply_markup: writeMoreKeyboard(userIdToSend).reply_markup });
        await ctx.scene.leave();
    } catch (e) {
        console.error(`[Bot] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞/–æ–ø—Ä–æ—Å–∞ –æ—Ç ${senderId} –∫ ${userIdToSend}:`, e.message);
        await ctx.reply(
            `‚ö†Ô∏è‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: \`${e.message}\`\n\n` +
            `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (@ArtizSQ –∏–ª–∏ @RegaaTG).`,
            { reply_to_message_id: ctx.message.message_id, parse_mode: "Markdown", reply_markup: cancelKeyboard().reply_markup }
        );
    }
});

sendScene.action('cancel', async (ctx) => {
    await ctx.answerCbQuery("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!");
    if (ctx.callbackQuery.message) {
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
    }
    await ctx.scene.leave();
});

// –°—Ü–µ–Ω–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
const replyScene = new Scenes.BaseScene('replyScene');

replyScene.enter(async (ctx) => {
    const originalSenderId = ctx.scene.state.originalSender; // –ü–æ–ª—É—á–∞–µ–º ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ü–µ–Ω—ã
    const repliedToMessageId = ctx.callbackQuery.message.message_id; // ID —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–∞–∂–∞–ª–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å"

    if (!originalSenderId) {
        await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–æ–º—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.', { parse_mode: 'Markdown', reply_to_message_id: repliedToMessageId });
        return ctx.scene.leave();
    }
    await ctx.reply('üëâ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.', { reply_markup: cancelKeyboard().reply_markup, reply_to_message_id: repliedToMessageId });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏
replyScene.on('message', async (ctx) => {
    const originalSenderId = ctx.scene.state.originalSender; // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
    const replierId = ctx.from.id; // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç
    const message = ctx.message;
    const baseText = "‚úâÔ∏è *–ü—Ä–∏—à–ª–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!*\n\n";
    const caption = message.caption ? baseText + message.caption : baseText;
    const replyMarkup = anonymousMessageButtons(replierId, originalSenderId).reply_markup;

    if (!originalSenderId) {
        await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–æ–º—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.', { reply_to_message_id: ctx.message.message_id, parse_mode: 'Markdown' });
        return ctx.scene.leave();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –æ—Ç–≤–µ—á–∞—é—â–µ–≥–æ
    const isBlocked = await isUserBlocked(originalSenderId, replierId);
    if (isBlocked) {
        await ctx.reply(`üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –≤–∞—Å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª.`, { reply_to_message_id: ctx.message.message_id, parse_mode: "Markdown" });
        return ctx.scene.leave();
    }

    try {
        await addMessageCounts(replierId, originalSenderId);

        let sentMessage;
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º message_id —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –æ—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
        const replyToMessageIdForOriginalSender = ctx.message.reply_to_message ? ctx.message.reply_to_message.message_id : undefined;

        if (message.text) {
            sentMessage = await ctx.telegram.sendMessage(originalSenderId, baseText + message.text, {
                parse_mode: "Markdown",
                reply_markup: replyMarkup,
                reply_to_message_id: replyToMessageIdForOriginalSender // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            });
        } else if (message.photo) {
            sentMessage = await ctx.telegram.sendPhoto(originalSenderId, message.photo[message.photo.length - 1].file_id, {
                caption: caption,
                parse_mode: "Markdown",
                reply_markup: replyMarkup,
                reply_to_message_id: replyToMessageIdForOriginalSender
            });
        } else if (message.video) {
            sentMessage = await ctx.telegram.sendVideo(originalSenderId, message.video.file_id, {
                caption: caption,
                parse_mode: "Markdown",
                reply_markup: replyMarkup,
                reply_to_message_id: replyToMessageIdForOriginalSender
            });
        } else if (message.document) {
            sentMessage = await ctx.telegram.sendDocument(originalSenderId, message.document.file_id, {
                caption: caption,
                parse_mode: "Markdown",
                reply_markup: replyMarkup,
                reply_to_message_id: replyToMessageIdForOriginalSender
            });
        } else if (message.audio) {
            sentMessage = await ctx.telegram.sendAudio(originalSenderId, message.audio.file_id, {
                caption: caption,
                parse_mode: "Markdown",
                reply_markup: replyMarkup,
                reply_to_message_id: replyToMessageIdForOriginalSender
            });
        } else if (message.voice) {
            sentMessage = await ctx.telegram.sendVoice(originalSenderId, message.voice.file_id, {
                caption: caption,
                parse_mode: "Markdown",
                reply_markup: replyMarkup,
                reply_to_message_id: replyToMessageIdForOriginalSender
            });
        } else if (message.video_note) {
            if (caption && caption !== baseText) {
                await ctx.telegram.sendMessage(originalSenderId, caption, { parse_mode: "Markdown", reply_markup: replyMarkup, reply_to_message_id: replyToMessageIdForOriginalSender });
            }
            sentMessage = await ctx.telegram.sendVideoNote(originalSenderId, message.video_note.file_id);
        } else if (message.sticker) {
            if (caption && caption !== baseText) {
                await ctx.telegram.sendMessage(originalSenderId, caption, { parse_mode: "Markdown", reply_markup: replyMarkup, reply_to_message_id: replyToMessageIdForOriginalSender });
            }
            sentMessage = await ctx.telegram.sendSticker(originalSenderId, message.sticker.file_id);
        } else if (message.poll) {
            const question = message.poll.question;
            const options = message.poll.options.map(o => o.text);
            await ctx.telegram.sendMessage(originalSenderId, baseText, { parse_mode: "Markdown", reply_markup: replyMarkup, reply_to_message_id: replyToMessageIdForOriginalSender });
            sentMessage = await ctx.telegram.sendPoll(originalSenderId, question, options, {
                is_anonymous: message.poll.is_anonymous,
                type: message.poll.type,
                allows_multiple_answers: message.poll.allows_multiple_answers
            });
        } else {
            await ctx.reply("‚ö†Ô∏è –ë–æ—Ç –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø.", { reply_to_message_id: ctx.message.message_id });
            return;
        }

        await ctx.reply('‚úÖ –í–∞—à–µ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!', { reply_to_message_id: ctx.message.message_id, parse_mode: 'Markdown' });
        await ctx.scene.leave();
    } catch (e) {
        console.error(`[Bot] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${replierId} –∫ ${originalSenderId}:`, e.message);
        await ctx.reply(
            `‚ö†Ô∏è‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: \`${e.message}\`\n\n` +
            `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (@ArtizSQ –∏–ª–∏ @RegaaTG).`,
            { reply_to_message_id: ctx.message.message_id, parse_mode: "Markdown", reply_markup: cancelKeyboard().reply_markup }
        );
    }
});

replyScene.action('cancel', async (ctx) => {
    await ctx.answerCbQuery("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!");
    if (ctx.callbackQuery.message) {
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
    }
    await ctx.scene.leave();
});
