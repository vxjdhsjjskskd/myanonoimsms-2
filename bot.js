import { Telegraf, Markup, Scenes, session } from 'telegraf';
import dotenv from 'dotenv';

// –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
import { setUser, getUserCode, getTgIdByCode, getMessageCounts, addMessageCounts, addLinkClick, updateUserCode } from './dbService.js';
import { cancelKeyboard, sendAgainKeyboard, replyToSenderKeyboard } from './keyboards.js';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const BOT_TOKEN = process.env.BOT_TOKEN;
export const bot = new Telegraf(BOT_TOKEN);

// --- FSM (Finite State Machine) - –°—Ü–µ–Ω—ã –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è ---

// –°—Ü–µ–Ω–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ü–ï–†–í–û–ì–û –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
const sendScene = new Scenes.BaseScene('sendScene');

sendScene.enter(async (ctx) => {
    await ctx.reply(
        "üëâ –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.\n\n" +
        "ü§ñ –ë–æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π: `–¢–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è, —Å—Ç–∏–∫–µ—Ä—ã, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –æ–ø—Ä–æ—Å—ã, GIF.`",
        { reply_markup: cancelKeyboard().reply_markup, parse_mode: "Markdown" }
    );
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ sendScene (–ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
sendScene.on('text', async (ctx) => {
    const userIdToSend = ctx.scene.state.user; // –ü–æ–ª—É—á–∞—Ç–µ–ª—å
    const senderId = ctx.from.id; // –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å

    try {
        await addMessageCounts(senderId, userIdToSend);

        await ctx.telegram.sendMessage(userIdToSend, `‚úâÔ∏è *–ü—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!*\n\n${ctx.message.text}`, {
            parse_mode: "Markdown",
            reply_markup: replyToSenderKeyboard(senderId).reply_markup // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å"
        });
        await ctx.reply(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!`, sendAgainKeyboard(userIdToSend));
        await ctx.scene.leave();
    } catch (e) {
        console.error(`[Bot] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—Å—Ç–∞ –æ—Ç ${senderId} –∫ ${userIdToSend}:`, e.message);
        await ctx.reply(
            `‚ö†Ô∏è‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: \`${e.message}\`\n\n` +
            `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (@ArtizSQ –∏–ª–∏ @RegaaTG).`,
            { parse_mode: "Markdown", reply_markup: cancelKeyboard().reply_markup }
        );
    }
});

sendScene.on(['photo', 'video', 'document', 'audio', 'voice', 'video_note', 'sticker', 'poll'], async (ctx) => {
    const userIdToSend = ctx.scene.state.user;
    const senderId = ctx.from.id;
    const message = ctx.message;
    const baseText = "‚úâÔ∏è *–ü—Ä–∏—à–ª–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!*\n\n";
    const caption = message.caption ? baseText + message.caption : baseText;
    const replyMarkup = replyToSenderKeyboard(senderId).reply_markup; // –ö–Ω–æ–ø–∫–∞ –æ—Ç–≤–µ—Ç–∞

    try {
        await addMessageCounts(senderId, userIdToSend);

        if (message.photo) {
            await ctx.telegram.sendPhoto(userIdToSend, message.photo[message.photo.length - 1].file_id, { caption: caption, parse_mode: "Markdown", reply_markup: replyMarkup });
        } else if (message.video) {
            await ctx.telegram.sendVideo(userIdToSend, message.video.file_id, { caption: caption, parse_mode: "Markdown", reply_markup: replyMarkup });
        } else if (message.document) {
            await ctx.telegram.sendDocument(userIdToSend, message.document.file_id, { caption: caption, parse_mode: "Markdown", reply_markup: replyMarkup });
        } else if (message.audio) {
            await ctx.telegram.sendAudio(userIdToSend, message.audio.file_id, { caption: caption, parse_mode: "Markdown", reply_markup: replyMarkup });
        } else if (message.voice) {
            await ctx.telegram.sendVoice(userIdToSend, message.voice.file_id, { caption: caption, parse_mode: "Markdown", reply_markup: replyMarkup });
        } else if (message.video_note) {
            if (caption && caption !== baseText) {
                await ctx.telegram.sendMessage(userIdToSend, caption, { parse_mode: "Markdown", reply_markup: replyMarkup });
            }
            await ctx.telegram.sendVideoNote(userIdToSend, message.video_note.file_id);
        } else if (message.sticker) {
            if (caption && caption !== baseText) {
                await ctx.telegram.sendMessage(userIdToSend, caption, { parse_mode: "Markdown", reply_markup: replyMarkup });
            }
            await ctx.telegram.sendSticker(userIdToSend, message.sticker.file_id);
        } else if (message.poll) {
            const question = message.poll.question;
            const options = message.poll.options.map(o => o.text);
            await ctx.telegram.sendMessage(userIdToSend, baseText, { parse_mode: "Markdown", reply_markup: replyMarkup }); // Send base text with reply button
            await ctx.telegram.sendPoll(userIdToSend, question, options, {
                is_anonymous: message.poll.is_anonymous,
                type: message.poll.type,
                allows_multiple_answers: message.poll.allows_multiple_answers
            });
        } else {
            return ctx.reply("‚ö†Ô∏è –ë–æ—Ç –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø.");
        }

        await ctx.reply(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!`, sendAgainKeyboard(userIdToSend));
        await ctx.scene.leave();
    } catch (e) {
        console.error(`[Bot] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞/–æ–ø—Ä–æ—Å–∞ –æ—Ç ${senderId} –∫ ${userIdToSend}:`, e.message);
        await ctx.reply(
            `‚ö†Ô∏è‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: \`${e.message}\`\n\n` +
            `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (@ArtizSQ –∏–ª–∏ @RegaaTG).`,
            { parse_mode: "Markdown", reply_markup: cancelKeyboard().reply_markup }
        );
    }
});

sendScene.action('cancel', async (ctx) => {
    await ctx.answerCbQuery("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!");
    if (ctx.callbackQuery.message) {
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
    }
    await ctx.scene.leave();
});

// –ù–û–í–ê–Ø –°–¶–ï–ù–ê: –î–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
const replyScene = new Scenes.BaseScene('replyScene');

replyScene.enter(async (ctx) => {
    const originalSenderId = ctx.scene.state.originalSender; // –ü–æ–ª—É—á–∞–µ–º ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å—Ü–µ–Ω—ã
    if (!originalSenderId) {
        await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–æ–º—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.', { parse_mode: 'Markdown' });
        return ctx.scene.leave();
    }
    await ctx.reply('üëâ –í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.', { reply_markup: cancelKeyboard().reply_markup });
});

// –ò–ó–ú–ï–ù–ï–ù–û: –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏)
replyScene.on('message', async (ctx) => {
    const originalSenderId = ctx.scene.state.originalSender; // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å
    const replierId = ctx.from.id; // –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç
    const message = ctx.message;
    const baseText = "‚úâÔ∏è *–ü—Ä–∏—à–ª–æ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ!*\n\n";
    const caption = message.caption ? baseText + message.caption : baseText;
    const replyMarkup = replyToSenderKeyboard(replierId).reply_markup; // –ö–Ω–æ–ø–∫–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è

    if (!originalSenderId) {
        await ctx.reply('‚ö†Ô∏è –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–æ–º—É –æ—Ç–≤–µ—Ç–∏—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.', { parse_mode: 'Markdown' });
        return ctx.scene.leave();
    }

    try {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏: replier –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç, originalSenderId –ø–æ–ª—É—á–∞–µ—Ç
        await addMessageCounts(replierId, originalSenderId);

        // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏
        if (message.text) {
            await ctx.telegram.sendMessage(originalSenderId, baseText + message.text, { parse_mode: "Markdown", reply_markup: replyMarkup });
        } else if (message.photo) {
            await ctx.telegram.sendPhoto(originalSenderId, message.photo[message.photo.length - 1].file_id, { caption: caption, parse_mode: "Markdown", reply_markup: replyMarkup });
        } else if (message.video) {
            await ctx.telegram.sendVideo(originalSenderId, message.video.file_id, { caption: caption, parse_mode: "Markdown", reply_markup: replyMarkup });
        } else if (message.document) {
            await ctx.telegram.sendDocument(originalSenderId, message.document.file_id, { caption: caption, parse_mode: "Markdown", reply_markup: replyMarkup });
        } else if (message.audio) {
            await ctx.telegram.sendAudio(originalSenderId, message.audio.file_id, { caption: caption, parse_mode: "Markdown", reply_markup: replyMarkup });
        } else if (message.voice) {
            await ctx.telegram.sendVoice(originalSenderId, message.voice.file_id, { caption: caption, parse_mode: "Markdown", reply_markup: replyMarkup });
        } else if (message.video_note) {
            if (caption && caption !== baseText) {
                await ctx.telegram.sendMessage(originalSenderId, caption, { parse_mode: "Markdown", reply_markup: replyMarkup });
            }
            await ctx.telegram.sendVideoNote(originalSenderId, message.video_note.file_id);
        } else if (message.sticker) {
            if (caption && caption !== baseText) {
                await ctx.telegram.sendMessage(originalSenderId, caption, { parse_mode: "Markdown", reply_markup: replyMarkup });
            }
            await ctx.telegram.sendSticker(originalSenderId, message.sticker.file_id);
        } else if (message.poll) {
            const question = message.poll.question;
            const options = message.poll.options.map(o => o.text);
            await ctx.telegram.sendMessage(originalSenderId, baseText, { parse_mode: "Markdown", reply_markup: replyMarkup });
            await ctx.telegram.sendPoll(originalSenderId, question, options, {
                is_anonymous: message.poll.is_anonymous,
                type: message.poll.type,
                allows_multiple_answers: message.poll.allows_multiple_answers
            });
        } else {
            await ctx.reply("‚ö†Ô∏è –ë–æ—Ç –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —ç—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–ø.");
            return ctx.scene.leave(); // –í—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω—ã, –µ—Å–ª–∏ —Ç–∏–ø –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        }

        await ctx.reply('‚úÖ –í–∞—à–µ –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–Ω–æ–Ω–∏–º–Ω–æ!', { parse_mode: 'Markdown' });
        await ctx.scene.leave();
    } catch (e) {
        console.error(`[Bot] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ${replierId} –∫ ${originalSenderId}:`, e.message);
        await ctx.reply(
            `‚ö†Ô∏è‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: \`${e.message}\`\n\n` +
            `–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (@ArtizSQ –∏–ª–∏ @RegaaTG).`,
            { parse_mode: "Markdown", reply_markup: cancelKeyboard().reply_markup }
        );
    }
});

replyScene.action('cancel', async (ctx) => {
    await ctx.answerCbQuery("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ!");
    if (ctx.callbackQuery.message) {
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
    }
    await ctx.scene.leave();
});


// –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä —Å—Ü–µ–Ω
const stage = new Scenes.Stage([sendScene, replyScene]);

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º middleware –¥–ª—è —Å–µ—Å—Å–∏–π –∏ —Å—Ü–µ–Ω
bot.use(session());
bot.use(stage.middleware());


// --- –ê–Ω—Ç–∏—Ñ–ª—É–¥ Middleware ---
const cooldowns = new Map();
const COOLDOWN_SECONDS = 3; 

bot.use(async (ctx, next) => {
    const userId = ctx.from.id;
    const now = Date.now();

    if (ctx.chat && ctx.chat.id) {
        await setUser(ctx.chat.id);
    }

    const lastExecuted = cooldowns.get(userId);
    if (lastExecuted) {
        const timeElapsed = now - lastExecuted;
        const timeLeft = (COOLDOWN_SECONDS * 1000) - timeElapsed;
        if (timeLeft > 0) {
            const secondsLeft = Math.ceil(timeLeft / 1000);
            return ctx.reply(`–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ ${secondsLeft} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.`);
        }
    }
    cooldowns.set(userId, now);
    return next();
});


// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

bot.start(async (ctx) => {
    const chatId = ctx.chat.id;
    const messageText = ctx.message.text;

    await setUser(chatId);
    const userCode = await getUserCode(chatId);

    const botInfo = await ctx.telegram.getMe();
    const link = `https://t.me/${botInfo.username}?start=${userCode}`;

    if (messageText && messageText.length > 6 && messageText.startsWith('/start ')) {
        const receivedCode = messageText.substring(7);
        const userIdToSend = await getTgIdByCode(receivedCode);

        if (userIdToSend) {
            await addLinkClick(userIdToSend);
            await ctx.scene.enter('sendScene', { user: userIdToSend });
        } else {
            await ctx.reply(`–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: \`${receivedCode}\`. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É.`, { parse_mode: "Markdown" });
        }
    } else {
        await ctx.reply(
            `üöÄ –ù–∞—á–Ω–∏ –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!\n\n` +
            `–¢–≤–æ—è —Å—Å—ã–ª–∫–∞:\nüëâ \`${link}\`\n\n` +
            `–†–∞–∑–º–µ—Å—Ç–∏ —ç—Ç—É —Å—Å—ã–ª–∫—É ‚òùÔ∏è –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è Telegram/TikTok/Instagram, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è üí¨`,
            { parse_mode: 'Markdown' }
        );
    }
});

// –ò–ó–ú–ï–ù–ï–ù–û: –ö–æ–º–∞–Ω–¥–∞ /profile —Ç–µ–ø–µ—Ä—å /stats
bot.command('stats', async (ctx) => {
    const chatId = ctx.chat.id;
    const { received, sent, linkClicks } = await getMessageCounts(chatId);
    const userCode = await getUserCode(chatId);

    const botInfo = await ctx.telegram.getMe();
    const link = `https://t.me/${botInfo.username}?start=${userCode}`;

    await ctx.reply(
        `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n` +
        `*–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è*\n\n` +
        `‚ûñ –ó–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n` +
        `üí¨ –°–æ–æ–±—â–µ–Ω–∏–π: ${received + sent}\n` +
        `üëÄ –ü–µ—Ä–µ—Ö–æ–¥–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ: ${linkClicks}\n\n` +
        `üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞: \n` +
        `üëâ\`${link}\`\n` +
        `‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ`,
        { parse_mode: 'Markdown' }
    );
});

// –ù–û–í–ê–Ø –ö–û–ú–ê–ù–î–ê: /url –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Å—ã–ª–∫–∏
bot.command('url', async (ctx) => {
    const chatId = ctx.chat.id;
    const userCode = await getUserCode(chatId);
    const botInfo = await ctx.telegram.getMe();
    const link = `https://t.me/${botInfo.username}?start=${userCode}`;

    await ctx.reply(
        `üîó *–í–∞—à–∞ —Ç–µ–∫—É—â–∞—è —Å—Å—ã–ª–∫–∞:*\nüëâ \`${link}\`\n\n` +
        `–í—ã –º–æ–∂–µ—Ç–µ —Ä–∞–∑–º–µ—Å—Ç–∏—Ç—å –µ–µ –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è.\n\n` +
        `–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ *—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É*, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ. ` +
        `–í–∞—à–∞ —Å—Ç–∞—Ä–∞—è —Å—Å—ã–ª–∫–∞ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.`,
        {
            reply_markup: Markup.inlineKeyboard([
                Markup.button.callback('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É', 'generate_new_link')
            ]).reply_markup,
            parse_mode: 'Markdown'
        }
    );
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–π —Å—Å—ã–ª–∫–∏
bot.action('generate_new_link', async (ctx) => {
    await ctx.answerCbQuery('–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É...');
    const chatId = ctx.from.id;
    const newCode = await updateUserCode(chatId); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ dbService
    const botInfo = await ctx.telegram.getMe();
    const newLink = `https://t.me/${botInfo.username}?start=${newCode}`;

    await ctx.editMessageText(
        `‚úÖ *–í–∞—à–∞ –Ω–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞:*\nüëâ \`${newLink}\`\n\n` +
        `–í–∞—à–∞ —Å—Ç–∞—Ä–∞—è —Å—Å—ã–ª–∫–∞ –±–æ–ª—å—à–µ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.`,
        { parse_mode: 'Markdown' }
    );
});


bot.command('help', async (ctx) => {
    await ctx.reply("–ü–æ–º–æ—â—å –±—É–¥–µ—Ç");
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë —Ä–∞–∑"
bot.action(/^again_(.+)$/, async (ctx) => {
    const userIdToSend = ctx.match[1];
    await ctx.answerCbQuery();
    if (ctx.callbackQuery.message) {
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id);
    }
    await ctx.scene.enter('sendScene', { user: userIdToSend });
});

// –ù–û–í–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö: –û–±—Ä–∞–±–æ—Ç–∫–∞ callback_query –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ"
bot.action(/^reply_to_sender_(.+)$/, async (ctx) => {
    const originalSenderId = ctx.match[1]; // –ü–æ–ª—É—á–∞–µ–º ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    await ctx.answerCbQuery('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–≤–µ—Ç—É...');
    if (ctx.callbackQuery.message) {
        await ctx.deleteMessage(ctx.callbackQuery.message.message_id); // –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π "–û—Ç–≤–µ—Ç–∏—Ç—å"
    }
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å—Ü–µ–Ω—É –æ—Ç–≤–µ—Ç–∞, –ø–µ—Ä–µ–¥–∞–≤–∞—è ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    ctx.scene.enter('replyScene', { originalSender: originalSenderId });
});


// –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω–µ –ø–æ–ø–∞–ª –Ω–∏ –≤ –æ–¥–Ω—É –∫–æ–º–∞–Ω–¥—É/FSM)
bot.on('text', async (ctx) => {
    await ctx.reply('–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –∏–ª–∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö FSM
bot.on('message', async (ctx) => {
    const handledByScene = ctx.session && ctx.session.__scenes && ctx.session.__scenes.current;
    if (!handledByScene && !ctx.message.text && !ctx.message.caption && !ctx.message.photo && !ctx.message.video && !ctx.message.document && !ctx.message.audio && !ctx.message.voice && !ctx.message.video_note && !ctx.message.sticker && !ctx.message.poll) {
        await ctx.reply('–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –º–µ–Ω—é –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è.');
    }
});


// --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
const startBot = async () => {
    while (!global.mongooseConnection || global.mongooseConnection.readyState !== 1) {
        console.log('[Bot Startup] –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB...');
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    // –£–¥–∞–ª–µ–Ω–∏–µ –≤–µ–±—Ö—É–∫–∞ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º Long Polling
    try {
        console.log('[Bot Startup] –ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≤–µ–±—Ö—É–∫ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º Long Polling...');
        const deleted = await bot.telegram.deleteWebhook();
        if (deleted) {
            console.log('[Bot Startup] –í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.');
        } else {
            console.log('[Bot Startup] –í–µ–±—Ö—É–∫ –Ω–µ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω.');
        }
    } catch (error) {
        console.error('[Bot Startup] –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–µ–±—Ö—É–∫–∞:', error.message);
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –º–µ–Ω—é Telegram
    await bot.telegram.setMyCommands([
        { command: 'start', description: 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞' },
        { command: 'stats', description: 'üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' },
        { command: 'url', description: 'üîó –ú–æ—è —Å—Å—ã–ª–∫–∞' },
        { command: 'help', description: '‚ùì –ü–æ–º–æ—â—å' }
    ]);
    console.log('[Bot Startup] –ö–æ–º–∞–Ω–¥—ã Telegram —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.');

    // –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ Long Polling
    bot.launch()
        .then(() => {
            console.log('‚úÖ Telegraf –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ Long Polling.');
        })
        .catch(err => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Telegraf –±–æ—Ç–∞:', err);
        });
};

// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è
startBot();

// Graceful stop (–¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ –ø—Ä–∏ —Å–∏–≥–Ω–∞–ª–∞—Ö SIGINT/SIGTERM)
process.once('SIGINT', async () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
    await bot.stop('SIGINT'); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegraf –±–æ—Ç–∞
    // MongoDB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ –≤ index.js
});
process.once('SIGTERM', async () => {
    console.log('–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...');
    await bot.stop('SIGTERM'); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Telegraf –±–æ—Ç–∞
    // MongoDB —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–æ –≤ index.js
});
                                
